{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","Component","App","useState","setRobots","setSearchfield","count","setCount","useEffect","fetch","then","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.48b7d353.chunk.js","sourcesContent":["import React from 'react';\n\n// const Card = (props) => {\n//     const { name, email, id } = props;\nconst Card = ({ name, email, id }) => {\n\treturn (\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2> {name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t//this is just to show error boundry functions though this is dev version of react\n\n\t// if (true) {\n\t// \tthrow new Error('NOOOO!');\n\t// }\n\treturn (\n\t\t<div>\n\t\t\t{robots.map((user, i) => {\n\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn <div style={{ overflowY: 'scroll', height: '750px' }}>{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t};\n\t}\n\tcomponentDidCatch(error, info) {\n\t\tthis.state({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooops. Under Construction</h1>;\n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;\n","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nfunction App() {\n\tconst [ robots, setRobots ] = useState([]);\n\tconst [ searchfield, setSearchfield ] = useState('');\n\tconst [ count, setCount ] = useState(0); // for demo purposes\n\n\tuseEffect(\n\t\t() => {\n\t\t\tfetch('https://jsonplaceholder.typicode.com/users').then((response) => response.json()).then((users) => {\n\t\t\t\tsetRobots(users);\n\t\t\t});\n\t\t\tconsole.log(count);\n\t\t},\n\t\t[ count ]\n\t); // if you add count, only run if count changes.\n\n\tconst onSearchChange = (event) => {\n\t\tsetSearchfield(event.target.value);\n\t};\n\n\tconst filteredRobots = robots.filter((robot) => {\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t});\n\n\treturn !robots.length ? (\n\t\t<h1>Loading</h1>\n\t) : (\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t<div className=\"tooltip\">\n\t\t\t\t<button onClick={() => setCount(count + 1)}>Click Me!</button>\n\t\t\t\t<span className=\"tooltiptext\">This just counts in console log.</span>\n\t\t\t</div>\n\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</ErrorBoundry>\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}